server = function(input,output,session){
# Initialize gameState
gameState = {reactiveValues(
ncols = 10,
nrows = 10,
nmines = 10,
board = generateBoard(rows=10,cols=10,mines=10),
opened = matrix(FALSE,ncol=10,nrow=10),
gameOver = FALSE,
success = FALSE
)}
# StartButton handling
observeEvent(input$start,{
gameState$ncols = input$ncols
gameState$nrows = input$nrows
gameState$nmines = input$nmines
gameState$board = generateBoard(ncols=gameState$ncols,nrows=gameState$nrows,mines=gameState$nmines)
gameState$opened = matrix(FALSE,ncols=gameState$ncols,nrows=gameState$nrows)
gameState$flags = matrix(TRUE,ncols=gameState$ncols,nrows=gameState$nrows)
gameOver = FALSE
gameState$success = FALSE
})
gameState = list(
ncols = 10,
nrows = 10,
nmines = 10,
board = generateBoard(rows=10,cols=10,mines=10),
opened = matrix(FALSE,ncol=10,nrow=10),
gameOver = FALSE,
success = FALSE
)
# Success test
observe({
if(sum(gameState$opened&(gameState$board!=-1))==gameState$ncols*gameState$nrows-gameState$mines){gameState$success=TRUE}
})
# mytext initialization
output$mytext=renderUI(tags$text("Try your luck !"))
# gameOver handling
observeEvent(gameState$gameOver,{
if(gameState$gameOver) {output$mytext=renderUI(tags$text("U lost !!"))}
else{output$mytext = renderUI(tags$text("go gogogo !"))}
})
# Success handling
observeEvent(gameState$success,{
if(gameState$success){output$mytext=renderUI(tags$text("U won , start again with moooore mines!"))}
else{output$mytext=renderUI(tags$text("Yeeaaeaeeaeeaae gogogogogo !"))}
})
# Clicks handling
observe(for(r in 1:gameState$nrows){
for(c in 1:gameState$ncols){
observeEvent(input[[paste0("r",r,"c",c)]],{
if(gameState$flags[r,c]==TRUE){return()}
else if(gameState$opened[r,c]==TRUE){return()}
else if(gameState$board[r,c]==-1){
gameState$opened[r,c]=TRUE
gameState$gameOver = TRUE
}
else {gameState$opened[r,c]=TRUE}
})
}
})
#boardUI rendering using rows and cols
output$boardUI = renderUI({
lapply(1:gameState$rows, function(r){
fluidRow(
lapply(1:gameState$cols, function(c){
actionButton(paste0("r",r,"c",c),
if(!gameState$opened[r,c]){" "}
else if(gameState$flags[r,c]){"f"}
else{paste0(gameState$board[r,c])}
)
})
)
})
})
}
shinyApp(ui,server)
# gameOver handling
observeEvent(gameState$gameOver,{
if(gameState$gameOver){output$mytext=renderUI(tags$text("U lost !!"))}
else{output$mytext = renderUI(tags$text("go gogogo !"))}
})
# Success handling
observeEvent(gameState$success,{
if(gameState$success){output$mytext=renderUI(tags$text("U won , start again with moooore mines!"))}
else{output$mytext=renderUI(tags$text("Yeeaaeaeeaeeaae gogogogogo !"))}
})
# Clicks handling
observe(for(r in 1:gameState$nrows){
for(c in 1:gameState$ncols){
observeEvent(input[[paste0("r",r,"c",c)]],{
if(gameState$flags[r,c]==TRUE){return()}
else if(gameState$opened[r,c]==TRUE){return()}
else if(gameState$board[r,c]==-1){
gameState$opened[r,c]=TRUE
gameState$gameOver = TRUE
}
else {gameState$opened[r,c]=TRUE}
})
}
})
#boardUI rendering using rows and cols
output$boardUI = renderUI({
lapply(1:gameState$rows, function(r){
fluidRow(
lapply(1:gameState$cols, function(c){
actionButton(paste0("r",r,"c",c),
if(!gameState$opened[r,c]){" "}
else if(gameState$flags[r,c]){"f"}
else{paste0(gameState$board[r,c])}
)
})
)
})
})
runApp('R/TEST2.R')
runApp('R/TEST2.R')
library(shiny)
#generateBoard
generateBoard = function(rows, cols, mines) {
# Create empty board
board = matrix(0, nrow = rows, ncol = cols)
# Place mines randomly on the board
mine_positions = sample(1:(rows * cols), size = mines)
board[mine_positions] = -1
# Calculate adjacent mine counts for each cell
for (r in 1:rows) {
for (c in 1:cols) {
if (board[r, c] != -1) {
adjacent_cells <- board[max(1, r - 1):min(rows, r + 1), max(1, c - 1):min(cols, c + 1)]
board[r, c] <- sum(adjacent_cells == -1)
}
}
}
return(board)
}
ui=fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("ncols","Number of columns",5,20,10),
sliderInput("nrows","Number of rows",5,20,10),
sliderInput("nmines","Number of mines",1,100,10),
actionButton("start","Start")
),
mainPanel(
textOutput("mytext"),
uiOutput("boardUI")
)
)
)
server = function(input,output,session){
# Initialize gameState
gameState = {reactiveValues(
ncols = 10,
nrows = 10,
nmines = 10,
board = generateBoard(rows=10,cols=10,mines=10),
opened = matrix(FALSE,ncol=10,nrow=10),
gameOver = FALSE,
success = FALSE
)}
# StartButton handling
observeEvent(input$start,{
gameState$ncols = input$ncols
gameState$nrows = input$nrows
gameState$nmines = input$nmines
gameState$board = generateBoard(ncols=gameState$ncols,nrows=gameState$nrows,mines=gameState$nmines)
gameState$opened = matrix(FALSE,ncols=gameState$ncols,nrows=gameState$nrows)
gameState$flags = matrix(TRUE,ncols=gameState$ncols,nrows=gameState$nrows)
gameOver = FALSE
gameState$success = FALSE
})
# Success test
observe({
if(sum(gameState$opened&(gameState$board!=-1))==gameState$ncols*gameState$nrows-gameState$mines){gameState$success=TRUE}
})
# mytext initialization
output$mytext=renderUI(tags$text("Try your luck !"))
# gameOver handling
observeEvent(gameState$gameOver,{
if(gameState$gameOver){output$mytext=renderUI(tags$text("U lost !!"))}
else{output$mytext = renderUI(tags$text("go gogogo !"))}
})
# Success handling
observeEvent(gameState$success,{
if(gameState$success){output$mytext=renderUI(tags$text("U won , start again with moooore mines!"))}
else{output$mytext=renderUI(tags$text("Yeeaaeaeeaeeaae gogogogogo !"))}
})
# Clicks handling
observe(for(r in 1:gameState$nrows){
for(c in 1:gameState$ncols){
observeEvent(input[[paste0("r",r,"c",c)]],{
if(gameState$flags[r,c]==TRUE){return()}
else if(gameState$opened[r,c]==TRUE){return()}
else if(gameState$board[r,c]==-1){
gameState$opened[r,c]=TRUE
gameState$gameOver = TRUE
}
else {gameState$opened[r,c]=TRUE}
})
}
})
#boardUI rendering using rows and cols
output$boardUI = renderUI({
lapply(1:gameState$rows, function(r){
fluidRow(
lapply(1:gameState$cols, function(c){
actionButton(paste0("r",r,"c",c),
if(!gameState$opened[r,c]){" "}
else if(gameState$flags[r,c]){"f"}
else{paste0(gameState$board[r,c])}
)
})
)
})
})
}
shinyApp(ui,server)
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
#generateBoard
generateBoard = function(rows, cols, mines) {
# Create empty board
board = matrix(0, nrow = rows, ncol = cols)
# Place mines randomly on the board
mine_positions = sample(1:(rows * cols), size = mines)
board[mine_positions] = -1
# Calculate adjacent mine counts for each cell
for (r in 1:rows) {
for (c in 1:cols) {
if (board[r, c] != -1) {
adjacent_cells <- board[max(1, r - 1):min(rows, r + 1), max(1, c - 1):min(cols, c + 1)]
board[r, c] <- sum(adjacent_cells == -1)
}
}
}
return(board)
}
runApp('R/TEST2.R')
runApp('R/TEST2.R')
!(TRUE)==FALSE
!TRUE
runApp('R/TEST2.R')
runApp('R/TEST2.R')
library(shiny)
ui = fluidPage(
sidebarLayout(
sidebarPanel(),
mainPanel(
tags$table(
tags$tr(
actionButton("r1c1",1),
actionButton("r1c2",2)
),
tags$tr(
actionButton("r2c1",3),
actionButton("r2c2",4)
)
)
)
)
)
server = function(input,output,session)
shinyApp(ui,server)
library(shiny)
ui = fluidPage(
sidebarLayout(
sidebarPanel(),
mainPanel(
tags$table(
tags$tr(
actionButton("r1c1",1),
actionButton("r1c2",2)
),
tags$tr(
actionButton("r2c1",3),
actionButton("r2c2",4)
)
)
)
)
)
server = function(input,output,session)
shinyApp(ui,server)
source("~/.active-rstudio-document")
library(shiny)
ui = fluidPage(
sidebarLayout(
sidebarPanel(),
mainPanel(
tags$table(
tags$tr(
actionButton("r1c1",1),
actionButton("r1c2",2)
),
tags$tr(
actionButton("r2c1",3),
actionButton("r2c2",4)
)
)
)
)
)
server = function(input,output,session)
shinyApp(ui,server)
library(shiny)
ui = fluidPage(
sidebarLayout(
sidebarPanel(),
mainPanel(
tags$table(
tags$tr(
actionButton("r1c1",1),
actionButton("r1c2",2)
),
tags$tr(
actionButton("r2c1",3),
actionButton("r2c2",4)
)
)
)
)
)
server = function(input,output,session)
shinyApp(ui,server)
runApp('R/uitest.R')
runApp('R/uitest.R')
runApp('R/uitest.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST2.R')
generateBoard(10,10,10)
runApp('R/TEST2.R')
gameSta
gameState = {list(
ncols = 10,
nrows = 10,
nmines = 10,
board = generateBoard(rows=10,cols=10,mines=10),
opened = matrix(FALSE,ncol=10,nrow=10),
gameOver = FALSE,
success = FALSE,
flags= matrix(FALSE,ncol=10,nrow=10)
)}
if((sum(gameState$opened&(gameState$board!=-1)))==(gameState$ncols*gameState$nrows-gameState$mines)){gameState$success=TRUE}
if((sum(gameState$opened&(gameState$board!=-1)))==(gameState$ncols * gameState$nrows - gameState$mines)){gameState$success=TRUE}
(sum(gameState$opened&(gameState$board!=-1)))
(gameState$ncols * gameState$nrows - gameState$mines)
(gameState$ncols * gameState$nrows )
(gameState$ncols * gameState$nrows)-gameState$mines
gameState$mines
if((sum(gameState$opened&(gameState$board!=-1)))==(gameState$ncols * gameState$nrows - gameState$mines)){gameState$success=TRUE}
if((sum(gameState$opened&(gameState$board!=-1)))==(gameState$ncols * gameState$nrows - gameState$nmines)){gameState$success=TRUE}
runApp('R/TEST2.R')
library(shiny)
gameState = {list(
ncols = 10,
nrows = 10,
nmines = 10,
board = generateBoard(rows=10,cols=10,nmines=10),
opened = matrix(FALSE,ncol=10,nrow=10),
gameOver = FALSE,
success = FALSE,
flags= matrix(FALSE,ncol=10,nrow=10)
)}
# Generate a matrix of a minesweeper grid
generateBoard = function(rows, cols, nmines) {
# Create empty board
board = matrix(0, nrow = rows, ncol = cols)
# Place mines randomly on the board
mine_positions = sample(1:(rows * cols), size = nmines)
board[mine_positions] = -1
# Calculate adjacent mine counts for each cell
for (r in 1:rows) {
for (c in 1:cols) {
if (board[r, c] != -1) {
adjacent_cells <- board[max(1, r - 1):min(rows, r + 1), max(1, c - 1):min(cols, c + 1)]
board[r, c] <- sum(adjacent_cells == -1)
}
}
}
return(board)
}
library(shiny)
gameState = {list(
ncols = 10,
nrows = 10,
nmines = 10,
board = generateBoard(rows=10,cols=10,nmines=10),
opened = matrix(FALSE,ncol=10,nrow=10),
gameOver = FALSE,
success = FALSE,
flags= matrix(FALSE,ncol=10,nrow=10)
)}
grid = lapply(1:(gameState$rows), function(r){
gridrow = lapply(1:(gameState$cols), function(c){
actionButton(paste0("r",r,"c",c),
if(gameState$opened[r,c]==FALSE){" "}
else if(gameState$flags[r,c]){"f"}
else{paste0(gameState$board[r,c])}
)
})
tags$tr(tagList(gridrow))
})
library(shiny)
gameState = {list(
ncols = 10,
nrows = 10,
nmines = 10,
board = generateBoard(rows=10,cols=10,nmines=10),
opened = matrix(FALSE,ncol=10,nrow=10),
gameOver = FALSE,
success = FALSE,
flags= matrix(FALSE,ncol=10,nrow=10)
)}
grid = lapply(1:(gameState$nrows), function(r){
gridrow = lapply(1:(gameState$ncols), function(c){
actionButton(paste0("r",r,"c",c),
if(gameState$opened[r,c]==FALSE){" "}
else if(gameState$flags[r,c]){"f"}
else{paste0(gameState$board[r,c])}
)
})
tags$tr(tagList(gridrow))
})
tags$table(tagList(grid))
runApp('R/TEST2.R')
runApp('R/TEST2.R')
runApp('R/TEST.R')
runApp('R/TEST2.R')
rows=10
cols=10
button_id={
laplly(1:rows,function(r){
laplly(1:cols,function(c){
paste0("r",r,"c",c)
})
})
}
button_id={
lapply(1:rows,function(r){
lapply(1:cols,function(c){
paste0("r",r,"c",c)
})
})
}
"patate"
View(button_id)
View(button_id)
a=lapply(button_id,function(id){
"patate"
})
for(id in button_id){print(id)}
runApp('R/TEST2.R')
runApp('R/TEST2.R')
#Creating the buttons list
button_id[r,c]
#Creating the buttons list
button_id[1,3]
#Creating the buttons list
button_id[[1,3]
for(r in 1:gameState$nrows){
#Creating the buttons list
button_id[[1,3]]
#Creating the buttons list
button_id[1,3]
#Creating the buttons list
button_id[1]
#Creating the buttons list
button_id[1,2]
#Creating the buttons list
button_id[1;2]
#Creating the buttons list
button_id[1,2]
#Creating the buttons list
button_id[1]$2
#Creating the buttons list
button_id$1
#Creating the buttons list
button_id[1]
#Creating the buttons list
button_id[1][2]
#Creating the buttons list
button_id[1][3]
#Creating the buttons list
button_id[1[2]]
#Creating the buttons list
button_id[1]
#Creating the buttons list
button_id[1][1]
#Creating the buttons list
button_id[1][1]
#Creating the buttons list
button_id[1][2]
#Creating the buttons list
button_id[1]
#Creating the buttons list
button_id[[1]]
#Creating the buttons list
button_id[[1]][[2]]
#Creating the buttons list
button_id = matrix(FALSE,gameState$nrows,gameState$ncols)
runApp('R/TEST2.R')
runApp('R/TEST2.R')
